## This is a GitHub Actions workflow that consists of three jobs - "integration", "build-and-push-ecr-image", 
# and "pull-and-start-app-on-prod". Here's a line-by-line explanation of the workflow:

name: workflow ##  Sets the name of the workflow to "workflow".

on: ##  Specifies the events that trigger the workflow.  
  push:  ##In this case, the workflow is triggered when a push event is
    branches: ## made to the main branch and the README.md file is not changed.
      - main 
    paths-ignore:
      - 'README.md'

permissions: ##  Defines permissions for accessing repository contents and issuing ID tokens.
  id-token: write 
  contents: read

jobs:  ## Defines the list of jobs to run in this workflow.
  integration: ## Defines the first job named "integration".
    name: Continuous Integration ## Sets the name of the first job to "Continuous Integration".
    runs-on: ubuntu-latest #  Sets the operating system for the job to Ubuntu.
    steps:  # Defines a list of steps to run in the job.
      - name: Checkout Code  # Checks out the code from the repository.
        uses: actions/checkout@v3 

      - name: Lint code ## Runs a linting check on the code and outputs a message indicating that the linting is completed.
        run: echo "Linting completed" 
 
      - name: Reformat Code ## Runs a code reformatting process and outputs a message indicating that the reformatting is completed.
        run: echo "Reformat code completed"

  build-and-push-ecr-image:
    name: Continuous Delivery
    needs: integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: DataCollection
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  pull-and-start-app-on-prod:
    needs: build-and-push-ecr-image
    name: Continuous Deployment
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: AWS ECR Login
        run: sudo docker login -u AWS -p $(aws ecr get-login-password --region ${{ secrets.AWS_REGION }}) ${{ secrets.AWS_ECR_LOGIN_URI }}

      - name: Pull App Image
        run: sudo docker pull ${{secrets.AWS_ECR_LOGIN_URI}}/${{ secrets.ECR_REPOSITORY_NAME }}:DataCollection

      - name: Remove Already Running Container
        run: docker ps -q --filter "name=data-collection" | grep -q . && docker stop ${IMAGE_NAME} && docker rm -fv ${IMAGE_NAME} || true

      - name: Docker System Prune to Remove Old Images
        run: docker system prune -f

      - name: Run Docker Image to serve users
        run: |
          docker run --name=data-collection -d \
          -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
          -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
          -e AWS_BUCKET_HEADER_URL=${{ secrets.AWS_BUCKET_HEADER_URL }} \
          -e AWS_BUCKET_NAME=${{ secrets.AWS_BUCKET_NAME }} \
          -e DATABASE_NAME=${{ secrets.DATABASE_NAME }} \
          -e ATLAS_CLUSTER_USERNAME=${{ secrets.ATLAS_CLUSTER_USERNAME }} \
          -e ATLAS_CLUSTER_PASSWORD=${{ secrets.ATLAS_CLUSTER_PASSWORD }} \
          -p 8080:8080 ${{secrets.AWS_ECR_LOGIN_URI}}/${{ secrets.ECR_REPOSITORY_NAME }}:DataCollection





